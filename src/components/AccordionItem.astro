---
interface Props {
  question: string;
  answer: string;
  isOpen?: boolean; // For potential server-side rendering of initial state
}

const { question, answer, isOpen = false } = Astro.props;
---

<div class="border-b border-white/10 py-4">
  <dt>
    {/* Button to toggle visibility */}
    <button type="button" class="flex w-full items-start justify-between text-left text-text-secondary group" aria-expanded={isOpen} aria-controls={`faq-answer-${Astro.props.question.replace(/\s+/g, '-')}`}>
      <span class="font-medium text-text-primary group-hover:text-brand-primary transition-colors">
        {question}
      </span>
      <span class="ml-6 flex h-7 items-center">
        {/* Icons for open/closed state - will be toggled by JS */}
        <svg class:list={["h-6 w-6 transform transition-transform duration-200", { 'rotate-180': isOpen, 'hidden': isOpen }]} xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
          <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 8.25l-7.5 7.5-7.5-7.5" />
        </svg>
         <svg class:list={["h-6 w-6 transform transition-transform duration-200", { 'hidden': !isOpen }]} xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
          <path stroke-linecap="round" stroke-linejoin="round" d="M4.5 15.75l7.5-7.5 7.5 7.5" />
        </svg>
      </span>
    </button>
  </dt>
  <dd class:list={["mt-2 pr-12", { 'hidden': !isOpen }]} id={`faq-answer-${Astro.props.question.replace(/\s+/g, '-')}`}>
    <p class="text-base text-text-secondary">{answer}</p>
  </dd>
</div>

<script>
  // Client-side script to handle accordion toggle
  // This script needs to run on the client
  document.querySelectorAll('button[aria-controls^="faq-answer-"]').forEach(button => {
    button.addEventListener('click', () => {
      const isExpanded = button.getAttribute('aria-expanded') === 'true';
      const answerId = button.getAttribute('aria-controls');
      // Add null check for answerId
      if (answerId) {
        const answerEl = document.getElementById(answerId);
        const icons = button.querySelectorAll('svg');

        button.setAttribute('aria-expanded', String(!isExpanded));
        answerEl?.classList.toggle('hidden');

        // Toggle icons visibility
        icons.forEach(icon => icon.classList.toggle('hidden'));
      }
    });
  });
</script>
